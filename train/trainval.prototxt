name: "Facetrainval"
layer {
  name: "attr_data_layer"
  type: "Python"
  top: "data"
  top: "points"
  top: "points_mask"
  top: "sex"
  top: "sex_mask"
  top: "age"
  top: "age_mask"
  python_param {
    module: "PythonDataLayer"
    layer: "AttrDataLayer"
    param_str: "{'landmark_train_path':'/workspace/data/img_celeba_cropped','landmark_train_list':'/workspace/data/mylandmark.txt','landmark_test_path':'/workspace/data/img_celeba_cropped','landmark_test_list':'/workspace/data/mylandmark.txt','age_sex_train_path':'/workspace/data/img_cropped_landmark','age_sex_train_list':'/workspace/data/myattributes.txt','age_sex_test_path':'/workspace/data/img_cropped_landmark','age_sex_test_list':'/workspace/data/myattributes.txt'}"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    pad: 0
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "relu1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "relu1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "relu2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "relu2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "relu3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "relu3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "relu4"
}
layer {
  name: "fc5"
  type: "InnerProduct"
  bottom: "relu4"
  top: "fc5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "fc5"
  top: "relu5"
}
layer {
  name: "drop5_points"
  type: "Dropout"
  bottom: "relu5"
  top: "drop5_points"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc6_points"
  type: "InnerProduct"
  bottom: "drop5_points"
  top: "fc6_points"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "fc6_points_masked"
  type: "Eltwise"
  bottom: "fc6_points"
  bottom: "points_mask"
  top: "fc6_points_masked"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "points_eucl_loss"
  type: "EuclideanLoss"
  bottom: "fc6_points_masked"
  bottom: "points"
  top: "points_eucl_loss"

  include {
    phase: TRAIN
  }
  loss_weight: 168
}

layer {
  name: "points_l1_loss"
  type: "L1Loss"
  bottom: "fc6_points_masked"
  bottom: "points"
  top: "points_l1_loss"

  include {
    phase: TEST
  }
  loss_weight: 168
}
layer {
  name: "drop5_sex"
  type: "Dropout"
  bottom: "relu5"
  top: "drop5_sex"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc6_sex"
  type: "InnerProduct"
  bottom: "drop5_sex"
  top: "fc6_sex"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "fc6_sex_masked"
  type: "Eltwise"
  bottom: "fc6_sex"
  bottom: "sex_mask"
  top: "fc6_sex_masked"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "sex_loss"
  type: "SoftmaxWithLoss"
  bottom: "fc6_sex_masked"
  bottom: "sex"
  top: "sex_loss"
  include {
    phase: TRAIN
  }
  loss_weight: 10
}

layer {
  name: "sex_acc"
  type: "Accuracy"
  bottom: "fc6_sex_masked"
  bottom: "sex"
  top: "sex_acc"
  include {
    phase: TEST
  }
}
layer {
  name: "drop5_age"
  type: "Dropout"
  bottom: "relu5"
  top: "drop5_age"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc6_age"
  type: "InnerProduct"
  bottom: "drop5_age"
  top: "fc6_age"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "fc6_age_masked"
  type: "Eltwise"
  bottom: "fc6_age"
  bottom: "age_mask"
  top: "fc6_age_masked"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "age_eucl_loss"
  type: "EuclideanLoss"
  bottom: "fc6_age_masked"
  bottom: "age"
  top: "age_eucl_loss"
  include {
    phase: TRAIN
  }
  loss_weight: 120
}

layer {
  name: "age_l1_loss"
  type: "L1Loss"
  bottom: "fc6_age_masked"
  bottom: "age"
  top: "age_l1_loss"
  loss_weight: 120
  include {
    phase: TEST
  }
}
